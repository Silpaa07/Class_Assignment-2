// Design, Develop and Implement a menu driven Program in C for the following operations on
//STACK of Integers (Array Implementation of Stack with maximum size MAX)
//a. Push an Element on to Stack
//b. Pop an Element from Stack
//c. Demonstrate Overflow and Underflow situations on Stack
//e. Display the status of Stack
//f. Exit

#include<stdio.h>
#include<stdlib.h>
#define MAX 5  
int stack[MAX], top = -1;
void push();
void pop();
void display();
int isFull();
int isEmpty();
int main() {
    int choice;
    while (1) {
        printf("\n--- Stack Operations ---\n");
        printf("1. Push an Element onto Stack\n");
        printf("2. Pop an Element from Stack\n");
        printf("3. Display Stack\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
 switch (choice) {
            case 1:
                push();
                break;
            case 2:
                pop();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0); 
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
 return 0;
}
void push() {
    int element;
if (isFull()) {
        printf("Stack Overflow! Cannot push an element.\n");
        return;
    }
 printf("Enter the element to push: ");
    scanf("%d", &element);
 stack[++top] = element;
    printf("Element %d pushed onto stack.\n", element);
}
void pop() {
  if (isEmpty()) {
        printf("Stack Underflow! No element to pop.\n");
        return;
    }
 int popped_element = stack[top--];
    printf("Element %d popped from stack.\n", popped_element);
}
void display() {
     if (isEmpty()) {
        printf("Stack is empty.\n");
        return;
    }
 printf("Stack elements:\n");
    for (int i = top; i >= 0; i--) {
        printf("%d\n", stack[i]);
    }
}
int isFull() {
    return top == MAX - 1;
}
int isEmpty() {
    return top == -1;
}
